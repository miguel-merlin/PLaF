
(* add last exercise 1 *)

let l1 = { head <= 0; length <= 0} (* 0 in head signals null *)
in letrec add_last_helper (nd) = proc (x) {
  if number?(nd.next)
   then 
      begin
	     l.head <={ data <=x; next <= 0 };
		   l.length <= l.length+1
      end
  else ((add_last_helper nd) x)
}
in let add_last = proc (ll) { proc (x) {
  if number?(ll.head)
   then
      begin
	    ll.head <={ data <=x; next <= ll.head };
		  ll.length <= ll.length+1
      end
  else (add_last_helper ll.head) 
} }
in begin
     ((add_last l1) 2);
     ((add_last l1) 3);
     ((add_last l1) 4);
     debug(l1)  (* required inspect the list *)
   end